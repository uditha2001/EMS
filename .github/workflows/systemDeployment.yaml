name: CD Pipeline

on:
  workflow_run:
    workflows: ["Code Build Testing"]  # Ensures CI passes before running CD
    types:
      - completed
    branches:
      - main
permissions:
  contents: read
  id-token: write
  actions: read
  packages: write


jobs:
  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}  # Ensures CI was successful

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build JAR
        run: |
          echo "Building Java project with Maven in the Backend folder..."
          cd Backend
          ./mvnw clean package -DskipTests

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend
        run: |
          docker compose build backend
          docker push udithaimesh/ems:backend-latest

      - name: Build and push frontend
        run: |
          docker compose build frontend
          docker push udithaimesh/ems:frontend-latest

      - name: Set up SSH Key
        run: |
          # Save the private key stored in GitHub Secrets as a file
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem  # Secure the key file with the correct permissions

      - name: Deploy to EC2
        run: |
          # SSH into the EC2 instance using the private key stored in the secret
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Commands to run on the EC2 instance for deployment
            cd /home/ec2-user/app  # Change to your app directory
            git pull origin main  # Pull the latest changes from GitHub
            docker-compose down  # Stop the running containers
            docker-compose up -d --build  # Rebuild and restart containers
            exit
          EOF
